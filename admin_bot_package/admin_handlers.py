from datetime import datetime

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from pydantic import ValidationError

from admin_bot_package.admin_states import PostStates, BaseAdminStates
from admin_bot_package.res import admin_kb
from utils.data import db
from utils.data.db import set_user_to_admin, new_post, send_post

admin_router = Router()

ADMIN_ID = 541852628  # –£–∑–Ω–∞—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç @getmyid_bot


# ToDO –°–¥–µ–ª–∞—Ç—å –≤—Å–æ—Å —Ç–µ–∫—Å—Ç–∞ –≤ HTML, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –¢–µ–ª–µ–≥–µ

# Admin functions ‚Äçüíº
# Admin menu"# works with [AdminStates.menu]
@admin_router.message(Command("start"))
async def hello_admin_command(msg: Message, state: FSMContext):
    is_admin = db.does_user_admin(msg.from_user.id)
    if is_admin:
        await msg.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–¥–º–∏–Ω", reply_markup=admin_kb.menu_kb)
        await state.set_state(BaseAdminStates.in_admin_state)
    else:
        await msg.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–¥–º–∏–Ω\n"
                              "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∞–º–∏ –ê–¥–º–∏–Ω–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É \"–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\"",
                         reply_markup=admin_kb.you_are_not_admin_kb)
        await state.set_state(BaseAdminStates.you_not_admin)


@admin_router.message(StateFilter(BaseAdminStates.you_not_admin))
async def you_not_admin(msg: Message, state: FSMContext):
    await msg.answer("–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º...")
    is_admin = db.does_user_admin(msg.from_user.id)
    if is_admin:
        await msg.answer(text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–¥–º–∏–Ω", reply_markup=admin_kb.menu_kb)
        await state.set_state(None)
    else:
        await msg.answer(text="–ù–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ")


# New Admin State
@admin_router.message(StateFilter(BaseAdminStates.in_admin_state), F.text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
async def make_user_admin(msg: Message, state: FSMContext):
    await msg.answer("–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ \n"
                     "@voskhod_survey_bot –∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–∞–Ω–¥—É /id\n"
                     "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—é–¥–∞")
    await state.set_state(BaseAdminStates.new_admin)


@admin_router.message(StateFilter(BaseAdminStates.new_admin))
async def new_admin(msg: Message, state: FSMContext):
    id = msg.text.split(" ")[3]
    await msg.answer(set_user_to_admin(id))
    await state.set_state(None)


# Post states
@admin_router.message(StateFilter(BaseAdminStates.in_admin_state), F.text == "–ù–æ–≤—ã–π –ø–æ—Å—Ç")
async def post_admin_command(msg: Message, state: FSMContext):
    await state.set_state(PostStates.title_state)
    await msg.answer(text="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –ü–æ—Å—Ç–∞")


# ToDo how to make back button reply_markup=admin_kb.back_menu_kb
# Input title
@admin_router.message(StateFilter(PostStates.title_state))
async def title_input(msg: Message, state: FSMContext):
    await msg.answer(text=f"{msg.html_text}\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞", parse_mode=ParseMode.HTML)
    await state.set_state(PostStates.text_state)

# ToDo make title input
# Input text
@admin_router.message(StateFilter(PostStates.text_state))
async def text_input(msg: Message, state: FSMContext):
    await msg.answer(f"{new_post(msg.from_user.id, str(msg.html_text))}\n", parse_mode=ParseMode.HTML)
    try:
        await msg.answer(await send_post(msg.from_user.id))
        # operator = Bot(config.USER_BOT_TOKEN,parse_mode=ParseMode.HTML)
        # await operator.send_message(756263716,"–°—Ç–∞—Å, —Ö–æ—Ç—å —è –∏ –±–æ—Ç, –Ω–æ –≤—Å–µ-—Ä–∞–≤–Ω–æ –≤–∏–∂—É, —á—Ç–æ —Ç—ã –¥—Ä–æ—á–∏—à—å")
        # await operator.close()
    except ValidationError as error:
        print(error)
    await msg.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=admin_kb.menu_kb, parse_mode=ParseMode.HTML)
    await state.set_state(None)
    # await commit_changes()


#  Input date
@admin_router.message(StateFilter(PostStates.date_state))
async def data_input(msg: Message, state: FSMContext):
    await msg.answer(text=f"–î–∞—Ç–∞: {datetime.now()}", parse_mode=ParseMode.HTML)
    await state.set_state(PostStates.that_right_state)


# @admin_router.message(StateFilter(PostStates.that_right_state))
# async def that_right_input(msg: Message, state: FSMContext):
#     await msg.answer(text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n", reply_markup=admin_kb.that_right_state_kb)
#
#
# @admin_router.callback_query(StateFilter(PostStates.that_right_state), F.data == "yes_button")
# async def yes_button(callback: CallbackQuery, state: FSMContext):
#     await callback.answer(text="–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –î–∞")
#     await state.set_state(None)
#
#
# @admin_router.callback_query(StateFilter(PostStates.that_right_state), F.data == "no_button")
# async def no_button(msg: Message, state: FSMContext):
#     await msg.answer(text="No,button pressed")
#     await state.set_state(PostStates.title_state)


# Registration in bot and start commands

@admin_router.message(StateFilter(BaseAdminStates.in_admin_state))
async def nothing_in_admin(msg: Message):
    await msg.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",reply_markup=admin_kb.menu_kb)

@admin_router.message()
async def nothing_before(msg: Message, state: FSMContext):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
# New admin state
